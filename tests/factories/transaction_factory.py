"""
Factory for Transaction model test data generation.
"""

from decimal import Decimal

import factory
from factory.django import DjangoModelFactory

from api.models import Transaction
from tests.factories.user_factory import UserFactory


class TransactionFactory(DjangoModelFactory):
    """
    Factory for creating Transaction instances with fake data.

    Attributes:
        user: Associated user (creates new user if not provided).
        amount: Random transaction amount between 1 and 10000.
        category: Random category (income or expense).
        description: Random sentence for description.
        date: Auto-generated by model (auto_now_add).

    Examples:
        >>> transaction = TransactionFactory()
        >>> transaction.amount
        Decimal('1250.50')
        >>> transaction.category
        'income'

        >>> expense = TransactionFactory(category='expense', amount=50.00)
        >>> expense.category
        'expense'

        >>> transactions = TransactionFactory.create_batch(10)
        >>> len(transactions)
        10

        >>> user_transactions = TransactionFactory.create_batch(5, user=user)
        >>> all(t.user == user for t in user_transactions)
        True
    """

    class Meta:
        """Factory configuration."""

        model = Transaction

    user = factory.SubFactory(UserFactory)
    amount = factory.Faker(
        "pydecimal",
        left_digits=4,
        right_digits=2,
        positive=True,
        min_value=Decimal("1.00"),
        max_value=Decimal("10000.00"),
    )
    category = factory.Iterator(["income", "expense"])
    description = factory.Faker("sentence", nb_words=6)
