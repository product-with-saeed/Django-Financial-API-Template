[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

[project]
name = "django-financial-api"
version = "1.0.0"
description = "Production-ready Django REST Framework backend for FinTech applications"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Saeed Mohammadpour", email = "product.with.saeed@gmail.com"}
]
keywords = ["django", "rest-framework", "fintech", "api", "financial"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

# ============================================================================
# BLACK - Code Formatting
# ============================================================================
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# ============================================================================
# ISORT - Import Sorting
# ============================================================================
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
skip = ["venv", "migrations"]
known_django = ["django"]
known_drf = ["rest_framework"]
sections = ["FUTURE", "STDLIB", "DJANGO", "DRF", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ============================================================================
# MYPY - Static Type Checking
# ============================================================================
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "manage"
ignore_errors = true

[[tool.mypy.overrides]]
module = "api.views"
# Django REST Framework ViewSets have complex metaclass behavior
disable_error_code = ["misc", "override"]

[[tool.mypy.overrides]]
module = "api.tests"
# Test files can be less strict
disable_error_code = ["attr-defined"]

# ============================================================================
# PYTEST - Testing Framework
# ============================================================================
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["api/tests.py", "tests"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--strict-config",
    "--cov=api",
    "--cov=config",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=xml",
    "--cov-fail-under=95",
    "--no-cov-on-fail",
    "-ra",
    "--reuse-db",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ============================================================================
# COVERAGE - Test Coverage
# ============================================================================
[tool.coverage.run]
source = ["api", "config"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "manage.py",
    "config/asgi.py",
    "config/wsgi.py",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# ============================================================================
# BANDIT - Security Linting
# ============================================================================
[tool.bandit]
exclude_dirs = ["/venv/", "/tests/", "*/migrations/*"]
skips = ["B101", "B601"]  # B101: assert_used, B601: paramiko_calls
severity = "medium"

# ============================================================================
# FLAKE8 - Linting (configuration in .flake8 file)
# ============================================================================
# Note: flake8 doesn't support pyproject.toml yet, see .flake8 file

# ============================================================================
# RADON - Code Complexity
# ============================================================================
[tool.radon]
exclude = "*/migrations/*,*/venv/*,*/tests/*"
show_complexity = true
min_complexity = "B"
